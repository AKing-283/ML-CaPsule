# Step-1: Model building
import os
import numpy as np
from PIL import Image
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from joblib import dump

# Image size for resizing
IMAGE_SIZE = (128, 128)

# Function to preprocess images
def preprocess_image(image_path, target_size):
    img = Image.open(image_path)
    img = img.resize(target_size)
    img = np.array(img) / 255.0
    return img.flatten()

# Directory containing the dataset
dataset_directory = '/content/drive/MyDrive/TrimDataset/Dataset1/'

# Lists to hold training and testing data
X_train = []
y_train = []
X_test = []
y_test = []

# Preprocess training data
for class_name in ['Real', 'Fake']:
    train_class_directory = os.path.join(dataset_directory, 'Train', class_name)
    for image_file in os.listdir(train_class_directory):
        image_path = os.path.join(train_class_directory, image_file)
        image_features = preprocess_image(image_path, IMAGE_SIZE)
        X_train.append(image_features)
        y_train.append(1 if class_name == 'Fake' else 0)

# Preprocess testing data
for class_name in ['Real', 'Fake']:
    test_class_directory = os.path.join(dataset_directory, 'Test', class_name)
    for image_file in os.listdir(test_class_directory):
        image_path = os.path.join(test_class_directory, image_file)
        image_features = preprocess_image(image_path, IMAGE_SIZE)
        X_test.append(image_features)
        y_test.append(1 if class_name == 'Fake' else 0)

# Convert lists to numpy arrays
X_train = np.array(X_train)
y_train = np.array(y_train)
X_test = np.array(X_test)
y_test = np.array(y_test)

# Train K-Nearest Neighbors classifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

# Predict on test data
y_pred = knn.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Save the trained model
model_save_path = '/content/drive/MyDrive/knn_image_classifier_model.joblib'
dump(knn, model_save_path)

# Step:2: Using our model to classify images
import numpy as np
from PIL import Image
from sklearn.neighbors import KNeighborsClassifier
from joblib import load
from google.colab import files

IMAGE_SIZE = (128, 128)

def preprocess_image(image, target_size):
    img = Image.open(image)
    img = img.resize(target_size)
    img = np.array(img) / 255.0
    return img.flatten()

model_path = '/content/drive/MyDrive/knn_image_classifier_model.joblib'
knn = load(model_path)

while True:
    uploaded = files.upload()
    image_path = list(uploaded.keys())[0]
    preprocessed_image = preprocess_image(image_path, IMAGE_SIZE)
    prediction = knn.predict([preprocessed_image])
    if prediction[0] == 1:
        print("The image is classified as FAKE.")
    else:
        print("The image is classified as REAL.")
    choice = input("Do you want to upload and classify another image? (yes/no): ")
    if choice.lower() != 'yes':
        break
