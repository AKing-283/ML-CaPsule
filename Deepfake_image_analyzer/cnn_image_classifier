#Step-1:Model building
import tensorflow as tf
from tensorflow.keras import layers, models, optimizers
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Define constants
IMAGE_SIZE = (128, 128)
BATCH_SIZE = 100
EPOCHS = 10

# Define data generators
train_datagen = ImageDataGenerator(rescale=1./255)
train_generator = train_datagen.flow_from_directory(
    'path/to/your/local/Dataset1/Train',
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary')

validation_datagen = ImageDataGenerator(rescale=1./255)
validation_generator = validation_datagen.flow_from_directory(
    'path/to/your/local/Dataset1/Test',
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary')

# Define the CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // BATCH_SIZE,
    epochs=EPOCHS,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // BATCH_SIZE)

# Save the model
model.save('path/to/your/local/cnn_image_classifier_model.h5')

#Step-2:Using our model to classify images
import numpy as np
from PIL import Image
from tensorflow.keras.models import load_model
import tkinter as tk
from tkinter import filedialog

# Image size for resizing
IMAGE_SIZE = (128, 128, 3)

def preprocess_image(image_path, target_size):
    img = Image.open(image_path)
    img = img.resize(target_size[:2])
    img = np.array(img) / 255.0
    return img

model_path = 'path/to/your/local/cnn_image_classifier_model.h5'
cnn_model = load_model(model_path)

def classify_image(image_path):
    preprocessed_image = preprocess_image(image_path, IMAGE_SIZE)
    preprocessed_image = np.expand_dims(preprocessed_image, axis=0)  # Add batch dimension
    prediction = cnn_model.predict(preprocessed_image)
    predicted_class_index = np.argmax(prediction)
    if predicted_class_index == 1:
        print("The image is classified as FAKE.")
    else:
        print("The image is classified as REAL.")

def upload_and_classify():
    root = tk.Tk()
    root.withdraw()
    while True:
        image_path = filedialog.askopenfilename(title="Select an image for classification")
        if not image_path:
            break
        classify_image(image_path)
        choice = input("Do you want to upload and classify another image? (yes/no): ")
        if choice.lower() != 'yes':
            break

if __name__ == "__main__":
    upload_and_classify()
